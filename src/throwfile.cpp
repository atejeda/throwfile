// https://www.dropbox.com/developers/documentation/http/overview// https://www.dropbox.com/developers/reference/oauth-guide// https://www.dropbox.com/developers/documentation/http/documentation#oauth2-authorize// https://www.dropbox.com/developers/documentation/http/documentation#oa2-token// https://github.com/atejeda/cmdlog/blob/master/Makefile// https://github.com/atejeda/cmdlog/blob/master/src/cmdlog.cpp// https://bitbucket.org/atejeda/swdbcxx/src/699920c9c8c7acd1654a18a2258089da274c2ec8/src/swdbcxx.cpp?at=master&fileviewer=file-view-default	// http://www.cplusplus.com/doc/tutorial/files/// https://www.dropbox.com/developers/apps/info/y5dfulqv9ayvjty// https://docs.cesanta.com/mongoose/master/// https://docs.cesanta.com/mongoose/master/#/http/upload.md/// https://github.com/cesanta/mongoose/blob/master/examples/examples.mk#include <iostream>#include <fstream>#include <string>#include <vector>#include <unordered_map>#include <unistd.h>#include <sys/types.h>#include <pwd.h>#include "mongoose.h"using namespace std;// application configuration 1const string homedir(getpwuid(getuid())->pw_dir);const string app_path_auth(homedir + "/.throwfile0");const string app_path_token(homedir + "/.throwfile1"); // application configuration 2const string app_key = "y5dfulqv9ayvjty";const string app_secret = "b0ucqd3w9a9tqja";// authorizationstring app_auth;string app_token;//------------------------------------------------------------------------------ // token// response like: // {"access_token": "WcDEiIbKXX8AAAAAAADGkYPtBcKCMXc1NzYDeWuudQ2R4hMfOPAdeg5xmXo_Urcv", "token_type": "bearer", "uid": "26580471", "account_id": "dbid:AACe5Qq-kXkBXGcXQLfWUOkPLU1qi2YV02s"}X+=3Ystatic int token_exit_flag = 0;static void token_handler(struct mg_connection *nc, int ev, void *ev_data) {    struct http_message* response = (struct http_message*) ev_data;    switch (ev) {        case MG_EV_CONNECT:            if (*(int*) ev_data != 0) {                cout << "connection failed, " << strerror(*(int*) ev_data) << endl;                nc->flags |= MG_F_SEND_AND_CLOSE;                token_exit_flag = 1;            }            break;        case MG_EV_HTTP_REPLY:               cout << "--" << endl;            cout << response->body.p << endl;            // cout << response->message.p << endl;            // cout << response->resp_code << endl;            nc->flags |= MG_F_CLOSE_IMMEDIATELY;            cout << "--" << endl;            token_exit_flag = 1;            break;        case MG_EV_CLOSE:            if (token_exit_flag == 0) {                cout << "closed connection" << endl;                token_exit_flag = 1;            }            break;        default:            break;    }}void get_token() {     string data =        "code=" + app_auth +        string("&grant_type=authorization_code") +        "&client_id=" + app_key +        "&client_secret=" + app_secret;    struct mg_mgr mmanager;    mg_mgr_init(&mmanager, NULL); // mmanager.hexdump_file = "./hexdump";        token_exit_flag = 0;    struct mg_connection* mconnection = mg_connect_http(        &mmanager,         token_handler,         "https://api.dropboxapi.com/oauth2/token",         "Content-Type: application/x-www-form-urlencoded\r\n",         data.c_str());    while (token_exit_flag == 0) {        mg_mgr_poll(&mmanager, 1000);    }    mg_mgr_free(&mmanager);}void get_auth() {    ifstream app_file_token(app_path_token);    bool valid = app_file_token.is_open() && app_file_token.good();    if (valid) {        getline(app_file_token, app_token);        valid = !app_token.empty();        app_file_token.close();    }    if (!valid) {        string url = "https://www.dropbox.com/oauth2/authorize?client_id=" + app_key + "&response_type=code";        cout <<"Auth configuration is empty or doesn't exists:" << endl;            cout << " To authorize this application to interact with your dropbox," << endl;        cout << " copy this address below in your browser, then copy the provided auth code here" << endl;        cout << " -> " << "\e[1m" << url << "\e[0m" << std::endl;        cout << "Paste the auth code here : ";        cin >> app_auth;        get_token();    }}string trim(const string& str) {    // https://stackoverflow.com/questions/25829143/c-trim-whitespace-from-a-string    size_t first = str.find_first_not_of(' ');    if (string::npos == first) {        return str;    }    size_t last = str.find_last_not_of(' ');    return str.substr(first, (last - first + 1));}void parse_token() {    // don't validate, just parse    //string token = "{\"access_token\": \"access_token_value\", \"token_type\": \"bearer\", \"uid\": \"26580471\", \"account_id\": \"dbid:AACe5Qq-kXkBXGcXQLfWUOkPLU1qi2YV02s\"}X+=3Y";        string token = "{\"access_token\":\"access_token_value\",\"token_type\":\"bearer\",\"uid\":\"26580471\",\"account_id\":\"dbid:AACe5Qq-kXkBXGcXQLfWUOkPLU1qi2YV02s\"}X+=3Y";    size_t cbp_start = token.find("{");    size_t cbp_end = token.find("}");    string json = token.substr(cbp_start + 1, cbp_end - cbp_start - 1);    while (true) {        size_t pos_init = 1;        size_t pos_end = string::npos;        string keyval;                if ((pos_end = json.find(",")) == string::npos) {            keyval = json;        } else {            keyval = json.substr(pos_init - 1, pos_end - pos_init + 1);        }        // trim         size_t dotpos = keyval.find(":");        // add quote        string key = keyval.substr(0, dotpos);        key = key.substr(1, key.size() - 2); // remove quotes                string val = keyval.substr(dotpos + 1, keyval.size());        size_t quotepos = val.find("\"");        val = val.substr(quotepos + 1, val.size() - quotepos - 2);        cout << key << " : " << trim(val) << endl;        if (pos_end == string::npos) break;        string unparsed = json.substr(pos_end + 1, json.size());        pos_end = unparsed.find("\"");        json = unparsed.substr(pos_end, unparsed.size());    }}//------------------------------------------------------------------------------ #include <typeinfo>int main(int argc, char* argv[]) {    parse_token();        //get_auth();    return EXIT_SUCCESS;}